// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  employees Employee[]
  positions Position[]

  @@map("companies")
}

model Employee {
  id        Int         @id @default(autoincrement())
  companyId Int         @map("company_id")
  name      String
  email     String      @unique
  role      String
  isActive  Boolean     @default(true) @map("is_active")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  company   Company     @relation(fields: [companyId], references: [id])
  interviews Interview[]

  @@index([companyId])
  @@map("employees")
}

model Position {
  id                Int            @id @default(autoincrement())
  companyId         Int            @map("company_id")
  interviewFlowId   Int            @map("interview_flow_id")
  title            String
  description      String?
  status           String         // e.g., "OPEN", "CLOSED", "DRAFT"
  isVisible        Boolean        @default(true) @map("is_visible")
  location         String
  jobDescription   String         @map("job_description")
  requirements     String
  responsibilities String
  salaryMin        Decimal        @map("salary_min")
  salaryMax        Decimal        @map("salary_max")
  employmentType   String         @map("employment_type") // e.g., "FULL_TIME", "PART_TIME"
  benefits         String?
  companyDescription String?      @map("company_description")
  applicationDeadline DateTime    @map("application_deadline")
  contactInfo      String        @map("contact_info")
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  
  company         Company        @relation(fields: [companyId], references: [id])
  interviewFlow   InterviewFlow @relation(fields: [interviewFlowId], references: [id])
  applications    Application[]

  @@index([companyId])
  @@index([interviewFlowId])
  @@map("positions")
}

model InterviewFlow {
  id          Int             @id @default(autoincrement())
  description String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  steps       InterviewStep[]
  positions   Position[]

  @@map("interview_flows")
}

model InterviewStep {
  id              Int           @id @default(autoincrement())
  interviewFlowId Int           @map("interview_flow_id")
  interviewTypeId Int           @map("interview_type_id")
  name            String
  orderIndex      Int           @map("order_index")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  interviewFlow   InterviewFlow  @relation(fields: [interviewFlowId], references: [id])
  interviewType   InterviewType  @relation(fields: [interviewTypeId], references: [id])
  interviews      Interview[]

  @@index([interviewFlowId])
  @@index([interviewTypeId])
  @@map("interview_steps")
}

model InterviewType {
  id          Int             @id @default(autoincrement())
  name        String          @unique
  description String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  steps       InterviewStep[]

  @@map("interview_types")
}

model Candidate {
  id        Int           @id @default(autoincrement())
  firstName String        @map("first_name")
  lastName  String        @map("last_name")
  email     String        @unique
  phone     String?
  address   String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  applications Application[]

  @@map("candidates")
}

model Application {
  id              Int       @id @default(autoincrement())
  positionId      Int       @map("position_id")
  candidateId     Int       @map("candidate_id")
  applicationDate DateTime  @default(now()) @map("application_date")
  status          String    // e.g., "PENDING", "REVIEWING", "ACCEPTED", "REJECTED"
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  position        Position   @relation(fields: [positionId], references: [id])
  candidate       Candidate  @relation(fields: [candidateId], references: [id])
  interviews      Interview[]

  @@index([positionId])
  @@index([candidateId])
  @@map("applications")
}

model Interview {
  id              Int           @id @default(autoincrement())
  applicationId   Int           @map("application_id")
  interviewStepId Int           @map("interview_step_id")
  employeeId      Int           @map("employee_id")
  interviewDate   DateTime      @map("interview_date")
  result          String?       // e.g., "PASSED", "FAILED", "PENDING"
  score           Int?
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  application     Application   @relation(fields: [applicationId], references: [id])
  interviewStep   InterviewStep @relation(fields: [interviewStepId], references: [id])
  employee        Employee      @relation(fields: [employeeId], references: [id])

  @@index([applicationId])
  @@index([interviewStepId])
  @@index([employeeId])
  @@map("interviews")
}